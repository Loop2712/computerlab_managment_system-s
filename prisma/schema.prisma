generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        BigInt    @id 
  firstName String
  lastName  String
  role      Role      @default(Student)
  email     String    @unique
  password  String
  userSemesters UserSemester[]
  bookings  Booking[]
  transactionsBorrowed Transaction[] @relation("Borrower")
  transactionsReturned Transaction[] @relation("Returner")
}

model Room {
  id              String       @id
  name            String
  type            RoomType
  description     String?
  requiresApproval Boolean
  roomSchedules   RoomSchedule[]
  bookings        Booking[]
  transactions    Transaction[]
}

model Enrollment {
  id               Int          @id @default(autoincrement())
  userSemesterId   Int
  roomScheduleId   String
  enrollmentDate   DateTime
  userSemester     UserSemester @relation(fields: [userSemesterId], references: [id])
  roomSchedule     RoomSchedule @relation(fields: [roomScheduleId], references: [id])
}

model Booking {
  id         Int          @id @default(autoincrement())
  userId     BigInt       
  roomId     String
  bookingDate DateTime
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus
  user       User         @relation(fields: [userId], references: [id])
  room       Room         @relation(fields: [roomId], references: [id])
}

model UserSemester {
  id          Int       @id @default(autoincrement())
  userId      BigInt       
  semester    String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  enrollments Enrollment[]
}

model RoomSchedule {
  id           String     @id
  roomId       String
  courseName   String
  teacherName  String
  scheduleDate DateTime
  startTime    DateTime
  endTime      DateTime
  semester     String
  room         Room       @relation(fields: [roomId], references: [id])
  enrollments  Enrollment[]
}

model Transaction {
  id                     Int           @id @default(autoincrement())
  borrowerId             BigInt       
  returnerId             BigInt?
  roomId                 String
  transactionType        TransactionType
  transactionDate        DateTime
  transactionTime        DateTime
  relatedTransactionId   Int?
  borrower               User          @relation("Borrower", fields: [borrowerId], references: [id])
  returner               User?         @relation("Returner", fields: [returnerId], references: [id])
  room                   Room          @relation(fields: [roomId], references: [id])
  relatedTransaction     Transaction?  @relation("RelatedTransaction", fields: [relatedTransactionId], references: [id])
  relatedTransactionBack Transaction[] @relation("RelatedTransaction")
}
enum Role {
  Student
  Teacher
  Admin
}

enum RoomType {
  Lecture
  Lab
}

enum BookingStatus {
  Pending
  Approved
  Denied
}

enum TransactionType {
  Borrow
  Return
}